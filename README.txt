What is it?
===========

The intent of this package is to provide a (mostly) automated setup
for running OpenCore on the WSGI-compliant repoze.zope2 stack.

This is still experimental; OpenCore is **not** guaranteed to run
smoothly in this setup. Please report bugs unique to this setup at

 http://trac.openplans.org/openplans/newticket?component=repopencore

This package is intended to be installed into an existing OpenCore
build. It will not build OpenCore itself. Please read

 http://www.coactivate.org/projects/opencore/getting-started

for OpenCore installation instructions.

How do I use it?
================

1. Install this package into your OpenCore environment.

2. Generate a configuration file for your deployment:

   `mkopencoreconfig 8080 zope/etc/zope.conf > opencore.ini`

     The first argument is the port to serve from; this
     does not need to be the same port that you serve
     your standard OpenCore setup from, and in fact the
     two setups can theoretically run in parallel.

     The second argument is the (absolute or relative) path
     to your Zope configuration file, usually found in
     {build_dir}/opencore/zope/etc/zope.conf

3. Start the server:

   `run-opencore-wsgi zope/bin/zopectl opencore.ini`

     The first argument is the (absolute or relative) path to
     your `zopectl` executable, usually found in
     {build_dir}/opencore/zope/bin/zopectl

     The second argument is the path to the configuration file
     generated by `mkopencoreconfig`.

     Additional arguments like --reload or --daemon can be provided.
     They will be passed to the `paster serve` command executed
     here; run `paster serve --help` for available options.
    
If you're ambitious you should be able to hook this into your
Supervisor setup, buildout configuration, and/or repeatable
Fassembler build. I haven't tried any of these.

What else can it do?
====================

There is also a not-yet-formalized proof-of-concept configuration for
running a single wsgi stack with opencore and tasktracker as endpoints.
If you want to try this out, you can use
 experimental_highly_broken_config_with_tasktracker_in_process.ini
if you change all the necessary values to something appropriate for your
installation.

You will need to install TaskTracker manually in your OpenCore virtualenv.
Surprisingly, this seems to work without any dependency conflicts. After
you've installed TaskTracker, you'll need to patch your newly installed
copy of myghty.importer at L56:
 -__builtin__.__import__ = import_module
 +#__builtin__.__import__ = import_module
That monkeypatch of the built-in __import__ seems to break Zope's own
munging of sys.path which results in ImportErrors all over the place.

Currently theming (with Deliverance) is not in place, but otherwise the
integration will actually Just Work as long as you've configured everything
correctly per the example INI; make sure you use the provided composite app
factory to dispatch to tasktracker in the right circumstances with the
X-Openplans-Project header and other contextual information set.

Remember that you will need to run `paster setup-app opencore.ini#tasktracker`
or similar on initial TaskTracker installation to set up the database.
